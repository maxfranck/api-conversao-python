# This is a basic workflow to help you get started with Actions

name: CI-CD

# Controls when the action will run.
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [master]
  pull_request:
    branches: [master]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  CI:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      - name: Docker Login
        # You may pin to the exact commit or the version.
        # uses: docker/login-action@f3364599c6aa293cdc2b8391b1b56d0c30e45c8a
        uses: docker/login-action@v1.8.0
        with:
          username: ${{ secrets.DOCKERHUB_USER }}
          # Password or personal access token used to log against the Docker registry
          password: ${{ secrets.DOCKERHUB_PWD }}
      - name: Build and push Docker images
        # You may pin to the exact commit or the version.
        # uses: docker/build-push-action@4a531fa5a603bab87dfa56578bd82b28508c9547
        uses: docker/build-push-action@v2.2.2
        env:
          tagVersion: "${{ github.run_number }}"
        with:
          # Build's context is the set of files located in the specified PATH or URL
          context: .
          # Path to the Dockerfile
          file: ./Dockerfile
          # List of tags
          tags: maxfranck/api-conversao-python:${{ env.tagVersion }}
          push: true

  CD:
    needs: [CI]
    runs-on: ubuntu-latest
    steps:
      - name: Azure WebApp
        uses: Azure/webapps-deploy@v2
        with:
          # Name of the Azure Web App
          app-name: webmap-uat
          # Applies to Web Apps(Windows and Linux) and Web App Containers(linux). Multi container scenario not supported. Publish profile (*.publishsettings) file contents with Web Deploy secrets
          publish-profile: ${{ secrets.WEBAPP }}
          # Applies to Web App Containers only: Specify the fully qualified container image(s) name. For example, 'myregistry.azurecr.io/nginx:latest' or 'python:3.7.2-alpine/'. For multi-container scenario multiple container image names can be provided (multi-line separated)
          images: maxfranck/api-conversao-python:${{ github.run_number }}
